{
    "AWSTemplateFormatVersion": "2010-09-09",

    "Description": "The public resources of a VPC.",

    "Parameters": {
        "DNSZone": {
            "Type": "String",
            "Description": "The DNS zone name of the VPC (should not end in 'vpc', .FullyQualifiedParentDNSZone will be appended).",
            "AllowedPattern": "[a-z0-9\\-]*",
            "ConstraintDescription": "can contain only lowercase letters, numbers and dashes."
        },
        "FullyQualifiedParentDNSZone": {
            "Type": "String",
            "Default": "compute.local",
            "Description": "The parent DNS zone (should not start or end with .).",
            "AllowedPattern": "[a-z][a-z0-9\\-.]*[a-z0-9]",
            "ConstraintDescription": "can contain only lowercase letters, numbers, dashes and dots."
        },
        "SecondOctet": {
            "Type": "Number",
            "Default": "80",
            "MinValue": "0",
            "MaxValue": "255",
            "Description": "The second octet of the CIDR block for the VPC."
        },
        "VPCId": {
            "Type": "AWS::EC2::VPC::Id",
            "Description": "The id of the VPC in which the resources will be created."
        },
        "BastionKeyName": {
            "Type": "AWS::EC2::KeyPair::KeyName",
            "Description": "SSH key name used to connect with the bastion server via the ec2-user account."
        },
        "BastionSSHCIDRIP": {
            "Type": "String",
            "Default": "24.9.253.190/32",
            "Description": "Range of IP addresses that will be able to connect to the bastion server via SSH."
        },
        "InternalKeyName": {
            "Type": "AWS::EC2::KeyPair::KeyName",
            "Description": "SSH key name used to connect with internal servers via the ec2-user account."
        },
        "VPNGatewayId": {
            "Type": "String",
            "Description": "The VPN gateway to which route tables will be connected via route propagation. Optional, no propagation occurs if not specified."
        },
        "AWSMusingsS3URL": {
            "Type": "String",
            "Default": "https://s3-us-west-2.amazonaws.com/aws-musings",
            "Description": "S3 path to aws-musings."
        }
    },

    "Mappings": {
        "AMIRegionMap": {
            "us-east-1": { "standard": "ami-1ecae776", "nat": "ami-303b1458" },
            "us-west-2": { "standard": "ami-e7527ed7", "nat": "ami-69ae8259" }
        },
        "AZRegionMap": {
            "us-east-1": { "a": "us-east-1a", "b": "us-east-1d", "c": "us-east-1c" },
            "us-west-2": { "a": "us-west-2a", "b": "us-west-2b", "c": "us-west-2c" }
        }
    },

    "Conditions": {
        "VPNGatewayIdDefined": { "Fn::Not": [ { "Fn::Equals": [ { "Ref": "VPNGatewayId" }, "" ] } ] }
    },

    "Resources": {
        "PublicSubnetA": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "CidrBlock": { "Fn::Join": [ ".", [ "10", { "Ref": "SecondOctet" }, "0.0/24" ] ] },
                "AvailabilityZone": { "Fn::FindInMap": [ "AZRegionMap", { "Ref": "AWS::Region" }, "a" ] },
                "VpcId": { "Ref": "VPCId" },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" },
                            { "Fn::Join": [ "", [ { "Ref": "AWS::Region" }, "a-public-subnet" ] ] } ] ] }
                    }
                ]
            }
        },
        "PublicSubnetB": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "CidrBlock": { "Fn::Join": [ ".", [ "10", { "Ref": "SecondOctet" }, "1.0/24" ] ] },
                "AvailabilityZone": { "Fn::FindInMap": [ "AZRegionMap", { "Ref": "AWS::Region" }, "b" ] },
                "VpcId": { "Ref": "VPCId" },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" },
                            { "Fn::Join": [ "", [ { "Ref": "AWS::Region" }, "b-public-subnet" ] ] } ] ] }
                    }
                ]
            }
        },
        "PublicSubnetC": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "CidrBlock": { "Fn::Join": [ ".", [ "10", { "Ref": "SecondOctet" }, "2.0/24" ] ] },
                "AvailabilityZone": { "Fn::FindInMap": [ "AZRegionMap", { "Ref": "AWS::Region" }, "c" ] },
                "VpcId": { "Ref": "VPCId" },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" },
                            { "Fn::Join": [ "", [ { "Ref": "AWS::Region" }, "c-public-subnet" ] ] } ] ] }
                    }
                ]
            }
        },

        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": { "Fn::Join": [ "-",
                            [ { "Ref": "AWS::StackName" }, { "Ref": "AWS::Region" }, "igw" ] ] }
                    }
                ]
            }
        },

        "GatewayAttachment": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": { "Ref": "VPCId" },
                "InternetGatewayId": { "Ref": "InternetGateway" }
            }
        },

        "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": { "Ref": "VPCId" },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": { "Fn::Join": [ "-",
                            [ { "Ref": "AWS::StackName" }, { "Ref": "AWS::Region" }, "public-rtb" ] ] }
                    }
                ]
            }
        },
        "PublicDefaultRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "RouteTableId": { "Ref": "PublicRouteTable" },
                "GatewayId": { "Ref": "InternetGateway" }
            },
            "DependsOn": "GatewayAttachment"
        },
        "PublicSubnetARouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": { "Ref": "PublicRouteTable" },
                "SubnetId": { "Ref": "PublicSubnetA" }
            }
        },
        "PublicSubnetBRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": { "Ref": "PublicRouteTable" },
                "SubnetId": { "Ref": "PublicSubnetB" }
            }
        },
        "PublicSubnetCRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": { "Ref": "PublicRouteTable" },
                "SubnetId": { "Ref": "PublicSubnetC" }
            }
        },

        "VPNGatewayRoutePropagation": {
            "Type": "AWS::EC2::VPNGatewayRoutePropagation",
            "Condition": "VPNGatewayIdDefined",
            "Properties": {
                "RouteTableIds": [ { "Ref": "PublicRouteTable" } ],
                "VpnGatewayId": { "Ref": "VPNGatewayId" }
            }
        },

        "NetworkACL": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": { "Ref": "VPCId" },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": { "Fn::Join": [ "-",
                            [ { "Ref": "AWS::StackName" }, { "Ref": "AWS::Region" }, "acl" ] ] }
                    }
                ]
            }
        },

        "EgressACLEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "true",
                "Protocol": "-1",
                "RuleAction": "allow",
                "RuleNumber": "100",
                "NetworkAclId": { "Ref": "NetworkACL" }
            }
        },
        "IngressACLEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "false",
                "Protocol": "-1",
                "RuleAction": "allow",
                "RuleNumber": "100",
                "NetworkAclId": { "Ref": "NetworkACL" }
            }
        },

        "PublicSubnetANetworkACLAssociation": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "NetworkAclId": { "Ref": "NetworkACL" },
                "SubnetId": { "Ref": "PublicSubnetA" }
            }
        },
        "PublicSubnetBNetworkACLAssociation": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "NetworkAclId": { "Ref": "NetworkACL" },
                "SubnetId": { "Ref": "PublicSubnetB" }
            }
        },
        "PublicSubnetCNetworkACLAssociation": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "NetworkAclId": { "Ref": "NetworkACL" },
                "SubnetId": { "Ref": "PublicSubnetC" }
            }
        },

        "DHCPOptions": {
            "Type": "AWS::EC2::DHCPOptions",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": { "Fn::Join": [ "-",
                            [ { "Ref": "AWS::StackName" }, { "Ref": "AWS::Region" }, "dopt" ] ] }
                    }
                ],
                "DomainName": { "Fn::Join": [ ".",
                    [ { "Ref": "DNSZone" }, { "Ref": "FullyQualifiedParentDNSZone" } ] ] },
                "DomainNameServers": [ { "Fn::GetAtt": [ "DNSInstanceStack", "Outputs.PrivateIP" ] } ]
            },
            "DependsOn": "DNSInstanceStack"
        },

        "VPCDHCPOptionsAssociation": {
            "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
            "Properties": {
                "VpcId": { "Ref": "VPCId" },
                "DhcpOptionsId": { "Ref": "DHCPOptions" }
            }
        },

        "BastionSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "bastion server security group",
                "VpcId": { "Ref": "VPCId" },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "bastion-sg" ] ] }
                    }
                ],
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": { "Ref": "BastionSSHCIDRIP" }
                    },
                    {
                        "IpProtocol": "-1",
                        "CidrIp": "10.0.0.0/8"
                    }
                ],
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "-1",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "NATSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "NAT server security group",
                "VpcId": { "Ref": "VPCId" },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "nat-sg" ] ] }
                    }
                ],
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "-1",
                        "CidrIp": "10.0.0.0/8"
                    }
                ],
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "-1",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "DNSSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "DNS server security group",
                "VpcId": { "Ref": "VPCId" },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "dns-sg" ] ] }
                    }
                ],
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "-1",
                        "CidrIp": "10.0.0.0/8"
                    }
                ],
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "-1",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },

        "BastionInstanceStack": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": { "Fn::Join": [ "/", [ { "Ref": "AWSMusingsS3URL" },
                    "infrastructure/bastion-instance.template" ] ] },
                "Parameters": {
                    "ImageId": { "Fn::FindInMap": [ "AMIRegionMap", { "Ref": "AWS::Region" }, "standard" ] },
                    "DNSZone": { "Ref": "DNSZone" },
                    "FullyQualifiedParentDNSZone": { "Ref": "FullyQualifiedParentDNSZone" },
                    "KeyName": { "Ref": "BastionKeyName" },
                    "AWSMusingsS3URL": { "Ref": "AWSMusingsS3URL" },
                    "SubnetId": { "Ref": "PublicSubnetA" },
                    "SecurityGroupId": { "Ref": "BastionSecurityGroup" }
                }
            }
        },
        "NATInstanceStack": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": { "Fn::Join": [ "/", [ { "Ref": "AWSMusingsS3URL" },
                    "infrastructure/nat-instance.template" ] ] },
                "Parameters": {
                    "ImageId": { "Fn::FindInMap": [ "AMIRegionMap", { "Ref": "AWS::Region" }, "nat" ] },
                    "DNSZone": { "Ref": "DNSZone" },
                    "FullyQualifiedParentDNSZone": { "Ref": "FullyQualifiedParentDNSZone" },
                    "KeyName": { "Ref": "InternalKeyName" },
                    "AWSMusingsS3URL": { "Ref": "AWSMusingsS3URL" },
                    "SubnetId": { "Ref": "PublicSubnetB" },
                    "SecurityGroupId": { "Ref": "NATSecurityGroup" }
                }
            }
        },
        "DNSInstanceStack": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": { "Fn::Join": [ "/", [ { "Ref": "AWSMusingsS3URL" },
                    "infrastructure/dns/dns-instance.template" ] ] },
                "Parameters": {
                    "ImageId": { "Fn::FindInMap": [ "AMIRegionMap", { "Ref": "AWS::Region" }, "standard" ] },
                    "DNSZone": { "Ref": "DNSZone" },
                    "FullyQualifiedParentDNSZone": { "Ref": "FullyQualifiedParentDNSZone" },
                    "SecondOctet": { "Ref": "SecondOctet" },
                    "KeyName": { "Ref": "InternalKeyName" },
                    "AWSMusingsS3URL": { "Ref": "AWSMusingsS3URL" },
                    "SubnetId": { "Ref": "PublicSubnetC" },
                    "SecurityGroupId": { "Ref": "DNSSecurityGroup" }
                }
            }
        }

    }

}
