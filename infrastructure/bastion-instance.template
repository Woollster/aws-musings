{
    "AWSTemplateFormatVersion": "2010-09-09",

    "Description": "The VPC's bastion server.",

    "Parameters": {
        "ImageId": {
            "Type": "String",
            "Description": "The AMI used to create the instance."
        },
        "DNSZone": {
            "Type": "String",
            "Description": "The DNS zone name of the VPC (should not end in 'vpc', used in naming the instance).",
            "AllowedPattern": "[a-z0-9\\-]*",
            "ConstraintDescription": "can contain only lowercase letters, numbers and dashes."
        },
        "FullyQualifiedParentDNSZone": {
            "Type": "String",
            "Default": "compute.local",
            "Description": "The parent DNS zone (should not start or end with .).",
            "AllowedPattern": "[a-z][a-z0-9\\-.]*[a-z0-9]",
            "ConstraintDescription": "can contain only lowercase letters, numbers, dashes and dots."
        },
        "KeyName": {
            "Type": "AWS::EC2::KeyPair::KeyName",
            "Description": "SSH key name used to connect to the bastion server via the ec2-user account."
        },
        "AWSMusingsS3URL": {
            "Type": "String",
            "Default": "https://s3-us-west-2.amazonaws.com/aws-musings",
            "Description": "S3 path to aws-musings."
        },
        "SubnetId": {
            "Type": "String",
            "Description": "The id of the subnet where the server will be added."
        },
        "SecurityGroupId": {
            "Type": "String",
            "Description": "The id of the security group protecting the bastion server."
        }
    },

    "Resources": {
        "BastionInstance": {
            "Type": "AWS::EC2::Instance",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "/etc/cfn/cfn-hup.conf": {
                                "source": { "Fn::Join": [ "/", [ { "Ref": "AWSMusingsS3URL" },
                                    "common/cfn-hup.conf" ] ] },
                                "context": {
                                    "STACK_ID": { "Ref": "AWS::StackId" },
                                    "REGION": { "Ref": "AWS::Region" }
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                                "source": { "Fn::Join": [ "/", [ { "Ref": "AWSMusingsS3URL" },
                                    "common/cfn-auto-reloader.conf" ] ] },
                                "context": {
                                    "STACK_ID": { "Ref": "AWS::StackId" },
                                    "REGION": { "Ref": "AWS::Region" },
                                    "INSTANCE_NAME": "BastionInstance"
                                }
                            },

                            "/etc/dhcp/dhclient.conf": {
                                "source": { "Fn::Join": [ "/", [ { "Ref": "AWSMusingsS3URL" },
                                    "common/dhclient.conf" ] ] },
                                "context": {
                                    "FQDN": { "Fn::Join": [ "", [ { "Ref": "DNSZone" }, "-bastion.",
                                        { "Ref": "DNSZone" }, ".", { "Ref": "FullyQualifiedParentDNSZone" } ] ] }
                                }
                            },

                            "/home/ec2-user/.bashrc": {
                                "source": { "Fn::Join": [ "/", [ { "Ref": "AWSMusingsS3URL" }, "common/bashrc.sh" ] ] },
                                "mode": "000644",
                                "owner": "ec2-user",
                                "group": "ec2-user"
                            },
                            "/root/.bashrc": {
                                "source": { "Fn::Join": [ "/", [ { "Ref": "AWSMusingsS3URL" }, "common/bashrc.sh" ] ] },
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            }
                        }
                    }
                }
            },
            "Properties": {
                "DisableApiTermination": "false",
                "ImageId": { "Ref": "ImageId" },
                "InstanceType": "t2.micro",
                "KeyName": { "Ref": "KeyName" },
                "Monitoring": "false",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": { "Fn::Join": [ "-", [ { "Ref": "DNSZone" }, "bastion" ] ] }
                    }
                ],
                "NetworkInterfaces": [
                    {
                        "AssociatePublicIpAddress": "true",
                        "DeleteOnTermination": "true",
                        "Description": "Primary network interface",
                        "DeviceIndex": 0,
                        "SubnetId": { "Ref": "SubnetId" },
                        "GroupSet": [ { "Ref": "SecurityGroupId" } ]
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [ "", [
                            "#!/bin/bash\n",

                            "# Helper function\n",
                            "function error_exit\n",
                            "{\n",
                            "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '", { "Ref": "BastionInstanceWaitHandle" }, "'\n",
                            "  exit 1\n",
                            "}\n",

                            "yum -y update || error_exit 'yum update failed'\n",

                            "sed -i -e \"s/localhost/", { "Fn::Join": [ "-", [ { "Ref": "DNSZone" }, "bastion" ] ] },
                                "/g\" /etc/sysconfig/network\n",
                            "sed -i -e \"s/localhost localhost.localdomain/",
                                { "Fn::Join": [ "-", [ { "Ref": "DNSZone" }, "bastion" ] ] }, " ",
                                { "Fn::Join": [ "-", [ { "Ref": "DNSZone" }, "bastion" ] ] },
                                ".localdomain localhost localhost.localdomain/g\" /etc/hosts\n",

                            "# Initialize CloudFormation\n",
                            "/opt/aws/bin/cfn-init -s ", { "Ref": "AWS::StackId" }, " -r BastionInstance ",
                                "--region ", { "Ref": "AWS::Region" }, " || error_exit 'Failed to run cfn-init'\n",

                            "# Start up the cfn-hup daemon to listen for changes to the metadata\n",
                            "/opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'\n",

                            "# All done so signal success\n",
                            "/opt/aws/bin/cfn-signal -e 0 -r \"BastionInstance setup complete\" '",
                                { "Ref": "BastionInstanceWaitHandle" }, "'\n",
                            "reboot\n"
                        ] ]
                    }
                }
            }
        },

        "BastionInstanceWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },

        "BastionInstanceWaitCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "Properties": {
                "Handle": { "Ref": "BastionInstanceWaitHandle" },
                "Timeout": "600"
            },
            "DependsOn": "BastionInstance"
        }

    }

}
